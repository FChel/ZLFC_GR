class ZCL_ZLFC_GR_DPC_EXT definition
  public
  inheriting from ZCL_ZLFC_GR_DPC
  create public .

public section.

  constants:
    begin of gc_constants,
        taxau         type kalsm_d value 'TAXAU',
        standard_po   type esart   value 'NB',
        ap_name       type string   value 'your local procurement area',
        ap_email      type string   value 'roman.purchaseorders@defence.gov.au',
        export_prefix type char7    value 'ZFSS_GR',
        success       type char1    value 'S',
        error         type char1    value 'E',
        warning       type char1    value 'W',
      end of gc_constants .

  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY
    redefinition .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~GET_EXPANDED_ENTITY
    redefinition .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~GET_EXPANDED_ENTITYSET
    redefinition .
protected section.

  methods ASSETS_CREATE_ENTITY
    redefinition .
  methods ASSETS_GET_ENTITY
    redefinition .
  methods PURCHASEORDERLOO_GET_ENTITYSET
    redefinition .
  methods USERDETAILS_GET_ENTITYSET
    redefinition .
  methods GOODSRECIPTLOOKU_GET_ENTITYSET
    redefinition .
  private section.
    " Type Definitions
    types: begin of ty_purchaseorder_deep.
             include type zcl_zlfc_gr_mpc=>ts_purchaseorder.
      types: items             type standard table of zcl_zlfc_gr_mpc=>ts_purchaseorderitem
                                with default key,
      movements         type standard table of zcl_zlfc_gr_mpc=>ts_purchaseordermovement
                                with default key,
      materialdocuments type standard table of zcl_zlfc_gr_mpc=>ts_materialdocument
                                with default key,
      assets            type standard table of zcl_zlfc_gr_mpc=>ts_purchaseorderasset
                                with default key,
    end of ty_purchaseorder_deep.

    types: begin of ty_goodsreceipt_deep.
             include type zcl_zlfc_gr_mpc=>ts_goodsreceipt.
      types: items             type standard table of zcl_zlfc_gr_mpc=>ts_goodsreceiptitem
                                with default key,
      materialdocuments type standard table of zcl_zlfc_gr_mpc=>ts_materialdocument
                                with default key,
    end of ty_goodsreceipt_deep.

    types: begin of ty_po_line,
             ebelp type ebelp,
             effwr type effwr,
             loekz type eloek,
             txz01 type txz01,
             netpr type bprei,
             mwskz type mwskz,
             webre type webre,
             knttp type knttp,
           end of ty_po_line.

    types: begin of ty_mat_line,
             zeile type mblpo,
             shkzg type shkzg,
           end of ty_mat_line.

    types: begin of ty_tax_code,
             mwskz type mwskz,
             kbetr type kbetr_kond,
           end of ty_tax_code.

    " Table Types
    types: tt_po_line        type hashed table of ty_po_line
                              with unique key ebelp,
           tt_mat_line       type hashed table of ty_mat_line
                              with unique key zeile,
           tt_tax_code       type hashed table of ty_tax_code
                              with unique key mwskz,
           tt_goodsmvt_items type standard table of bapi2017_gm_item_create
                              with default key.

    " Entity Handler Methods
    methods goodsreceipt_get_ee
      importing
        iv_entity_name           type string optional
        iv_entity_set_name       type string optional
        iv_source_name           type string optional
        it_key_tab               type /iwbep/t_mgw_name_value_pair optional
        it_navigation_path       type /iwbep/t_mgw_navigation_path optional
        io_expand                type ref to /iwbep/if_mgw_odata_expand optional
        io_tech_request_context  type ref to /iwbep/if_mgw_req_entity optional
      exporting
        er_entity                type ref to data
        es_response_context      type /iwbep/if_mgw_appl_srv_runtime=>ty_s_mgw_response_entity_cntxt
        et_expanded_clauses      type string_table
        et_expanded_tech_clauses type string_table
      raising
        /iwbep/cx_mgw_busi_exception
        /iwbep/cx_mgw_tech_exception.

    methods purchaseorder_get_ee
      importing
        iv_entity_name           type string optional
        iv_entity_set_name       type string optional
        iv_source_name           type string optional
        it_key_tab               type /iwbep/t_mgw_name_value_pair optional
        it_navigation_path       type /iwbep/t_mgw_navigation_path optional
        io_expand                type ref to /iwbep/if_mgw_odata_expand optional
        io_tech_request_context  type ref to /iwbep/if_mgw_req_entity optional
      exporting
        er_entity                type ref to data
        es_response_context      type /iwbep/if_mgw_appl_srv_runtime=>ty_s_mgw_response_entity_cntxt
        et_expanded_clauses      type string_table
        et_expanded_tech_clauses type string_table
      raising
        /iwbep/cx_mgw_busi_exception
        /iwbep/cx_mgw_tech_exception.

    methods goodsreceipt_save
      importing
        iv_entity_name          type string optional
        iv_entity_set_name      type string optional
        iv_source_name          type string optional
        io_data_provider        type ref to /iwbep/if_mgw_entry_provider
        it_key_tab              type /iwbep/t_mgw_name_value_pair optional
        it_navigation_path      type /iwbep/t_mgw_navigation_path optional
        io_expand               type ref to /iwbep/if_mgw_odata_expand
        io_tech_request_context type ref to /iwbep/if_mgw_req_entity_c optional
      exporting
        er_deep_entity          type ref to data
      raising
        /iwbep/cx_mgw_busi_exception
        /iwbep/cx_mgw_tech_exception.

    methods purchaseorder_save
      importing
        iv_entity_name          type string optional
        iv_entity_set_name      type string optional
        iv_source_name          type string optional
        io_data_provider        type ref to /iwbep/if_mgw_entry_provider
        it_key_tab              type /iwbep/t_mgw_name_value_pair optional
        it_navigation_path      type /iwbep/t_mgw_navigation_path optional
        io_expand               type ref to /iwbep/if_mgw_odata_expand
        io_tech_request_context type ref to /iwbep/if_mgw_req_entity_c optional
      exporting
        er_deep_entity          type ref to data
      raising
        /iwbep/cx_mgw_busi_exception
        /iwbep/cx_mgw_tech_exception.

    " Business Logic Methods
    methods read_goods_receipt
      importing
        iv_mat_doc                  type mblnr
        iv_doc_year                 type mjahr
      returning
        value(rs_goodsreceipt_deep) type ty_goodsreceipt_deep
      raising
        /iwbep/cx_mgw_busi_exception
        /iwbep/cx_mgw_tech_exception.

    methods read_purchase_order
      importing
        iv_po_number                 type char12
      returning
        value(rs_purchaseorder_deep) type ty_purchaseorder_deep
      raising
        /iwbep/cx_mgw_busi_exception
        /iwbep/cx_mgw_tech_exception.

    methods cancel_goods_receipt
      changing
        cs_goodsreceipt_deep type ty_goodsreceipt_deep.

    methods create_goods_receipt
      importing
        iv_test_mode          type abap_bool
      changing
        cs_purchaseorder_deep type ty_purchaseorder_deep.

    " Validation Methods
    methods validate_goods_receipt_items
      importing
        is_purchaseorder_deep type ty_purchaseorder_deep
        io_message_container  type ref to /iwbep/if_message_container
      returning
        value(rv_has_errors)  type abap_bool.

    methods check_field_is_off
      importing
        iv_felei         type felei
        iv_fegru         type fegru
      returning
        value(rv_is_off) type sap_bool.

    " Helper Methods for Goods Movement
    methods prepare_goodsmvt_header
      importing
        is_movement      type zcl_zlfc_gr_mpc=>ts_purchaseordermovement
      returning
        value(rs_header) type bapi2017_gm_head_01.

    methods prepare_goodsmvt_items
      importing
        is_purchaseorder_deep type ty_purchaseorder_deep
        is_movement           type zcl_zlfc_gr_mpc=>ts_purchaseordermovement
      returning
        value(rt_items)       type tt_goodsmvt_items.

    methods process_goods_movement
      importing
        is_header             type bapi2017_gm_head_01
        is_purchaseorder_deep type ty_purchaseorder_deep
        io_message_container  type ref to /iwbep/if_message_container
      changing
        cs_purchaseorder_deep type ty_purchaseorder_deep.

    " Message Handling Methods
    methods get_message_container
      returning
        value(ro_container) type ref to /iwbep/if_message_container.

    methods add_custom_error_message
      importing
        io_message_container type ref to /iwbep/if_message_container
        iv_msgid             type symsgid
        iv_msgno             type symsgno
        iv_msgv1             type symsgv optional
        iv_msgv2             type symsgv optional
        iv_msgv3             type symsgv optional
        iv_msgv4             type symsgv optional.

    methods handle_bapi_messages
      importing
        it_return             type bapiret2_t
        io_message_container  type ref to /iwbep/if_message_container
        is_movement           type zcl_zlfc_gr_mpc=>ts_purchaseordermovement optional
      changing
        cs_purchaseorder_deep type ty_purchaseorder_deep optional.

    " Utility Methods
    methods format_alpha_output
      importing
        iv_input         type any
      returning
        value(rv_output) type string.

    methods get_user_full_name
      importing
        iv_username    type xubname
      returning
        value(rv_name) type string.

    methods get_employee_details
      importing
        iv_username    type xubname
      returning
        value(rv_name) type string.

ENDCLASS.



CLASS ZCL_ZLFC_GR_DPC_EXT IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->VALIDATE_GOODS_RECEIPT_ITEMS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_PURCHASEORDER_DEEP          TYPE        TY_PURCHASEORDER_DEEP
* | [--->] IO_MESSAGE_CONTAINER           TYPE REF TO /IWBEP/IF_MESSAGE_CONTAINER
* | [<-()] RV_HAS_ERRORS                  TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method validate_goods_receipt_items.
    data: lv_message         type string,
          lv_duplicate_count type i.

    rv_has_errors = abap_false.

    loop at is_purchaseorder_deep-movements into data(ls_movement).
      " Duplicate check
      if ls_movement-entry_qnt is not initial and
         ls_movement-doc_date is not initial and
         ls_movement-po_item is not initial.

        select mblnr as mat_doc, mjahr as doc_year
          from mseg
          into table @data(lt_duplicates)
          where budat_mkpf = @ls_movement-doc_date
            and bpmng = @ls_movement-entry_qnt
            and ebeln = @is_purchaseorder_deep-po_number
            and ebelp = @ls_movement-po_item
            and shkzg = 'S'.

        lv_duplicate_count = lines( lt_duplicates ).
        if lv_duplicate_count > 0.
          message w003 with lv_duplicate_count into lv_message.
          add_custom_error_message(
            io_message_container = io_message_container
            iv_msgid = sy-msgid
            iv_msgno = sy-msgno
            iv_msgv1 = conv symsgv( lv_duplicate_count ) ).
        endif.
      endif.

      " Date validation
      if ls_movement-doc_date > sy-datum.
        message e004 into lv_message.
        add_custom_error_message(
          io_message_container = io_message_container
          iv_msgid = sy-msgid
          iv_msgno = sy-msgno ).
        rv_has_errors = abap_true.
      endif.

      " Quantity validation
      if ls_movement-entry_qnt is not initial and ls_movement-entry_qnt < 1.
        message e005 into lv_message.
        add_custom_error_message(
          io_message_container = io_message_container
          iv_msgid = sy-msgid
          iv_msgno = sy-msgno ).
        rv_has_errors = abap_true.
      endif.
    endloop.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZLFC_GR_DPC_EXT->USERDETAILS_GET_ENTITYSET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_FILTER_SELECT_OPTIONS       TYPE        /IWBEP/T_MGW_SELECT_OPTION
* | [--->] IS_PAGING                      TYPE        /IWBEP/S_MGW_PAGING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [--->] IT_ORDER                       TYPE        /IWBEP/T_MGW_SORTING_ORDER
* | [--->] IV_FILTER_STRING               TYPE        STRING
* | [--->] IV_SEARCH_STRING               TYPE        STRING
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITYSET(optional)
* | [<---] ET_ENTITYSET                   TYPE        ZCL_ZLFC_GR_MPC=>TT_USERDETAIL
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method userdetails_get_entityset.
    data: ls_entity like line of et_entityset.

    " User ID
    ls_entity-user_id = sy-uname.

    " Full name from user master
    ls_entity-full_name = get_user_full_name( sy-uname ).
    if ls_entity-full_name is initial.
      ls_entity-full_name = sy-uname.
    endif.

    " Full name from HR
    ls_entity-full_name_hr = get_employee_details( sy-uname ).
    if ls_entity-full_name_hr is initial.
      ls_entity-full_name_hr = ls_entity-full_name.
    endif.

    append ls_entity to et_entityset.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->READ_PURCHASE_ORDER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PO_NUMBER                   TYPE        CHAR12
* | [<-()] RS_PURCHASEORDER_DEEP          TYPE        TY_PURCHASEORDER_DEEP
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method read_purchase_order.

    data: lo_message_container type ref to /iwbep/if_message_container,
          lv_ebeln             type ebeln,
          lv_wrbtr             type wrbtr,
          lv_wmwst             type wmwst,
          lv_nvv               type bset-fwste,
          lt_mwdat             type table of rtax1u15,
          lt_return            type bapiret2_t.

    lo_message_container = get_message_container( ).

    " Check if document is from VIM (12 digits)
    if strlen( iv_po_number ) = 12.
      rs_purchaseorder_deep-vimdocid = iv_po_number.
      lv_ebeln = iv_po_number(10).
    else.
      lv_ebeln = iv_po_number.
    endif.

    " Read PO header using CDS view
    select single
      purchaseorder as po_number,
      companycode as comp_code,
      documenttype as doc_type,
      vendor,
      vendorname as vendor_name,
      currency,
      documentdate as creat_date,
      createdby as created_by,
      iscomplete,
      isapproved,
      isstandardpo,
      ismyfienabled,
      totalvalue as total_value
    from zi_zlfc_gr_pocomplete
    where purchaseorder = @lv_ebeln
    into @data(ls_po_header).

    if sy-subrc ne 0.
      " PO not found
      message e001 into data(lv_message).
      lo_message_container->add_message(
        iv_msg_type = sy-msgty
        iv_msg_id = sy-msgid
        iv_msg_number = sy-msgno
        iv_add_to_response_header = abap_true ).
      return.
    endif.

    " Map to result structure
    rs_purchaseorder_deep-po_number = ls_po_header-po_number.
    rs_purchaseorder_deep-comp_code = ls_po_header-comp_code.
    rs_purchaseorder_deep-vendor = ls_po_header-vendor.
    rs_purchaseorder_deep-vendor_name = ls_po_header-vendor_name.
    rs_purchaseorder_deep-currency = ls_po_header-currency.
    rs_purchaseorder_deep-complete = ls_po_header-iscomplete.
    rs_purchaseorder_deep-approved = ls_po_header-isapproved.
    rs_purchaseorder_deep-is_my_fi = ls_po_header-ismyfienabled.
    rs_purchaseorder_deep-total_value = ls_po_header-total_value.

    " Check if excluded (non-standard PO)
    if ls_po_header-isstandardpo ne abap_true.
      rs_purchaseorder_deep-po_number = lv_ebeln.
      rs_purchaseorder_deep-excluded = abap_true.
      return.
    endif.

    " Convert total value to BAPI format
    call function 'CURRENCY_AMOUNT_SAP_TO_BAPI'
      exporting
        currency    = rs_purchaseorder_deep-currency
        sap_amount  = rs_purchaseorder_deep-total_value
      importing
        bapi_amount = rs_purchaseorder_deep-total_value.

    " Read PO items using CDS view - matching ZSLCL_GR_POITM structure
    " Read ALL PO items first, then filter in ABAP
    select
      purchaseorderitem as po_item,
      itemdescription as short_text,
      orderquantity as quantity,
      orderunit as po_unit,
      netprice as net_price,
      taxcode as tax_code,
      effectivevalue as effective_value,
      deliveredquantity as quantity_delivered,
      openquantity as quantity_remaining,
      accountassignmentcategory as acctasscat,
      isassetitem as is_asset,
      invoicereceipt,              " GR indicator
      deliverycompleted,           " No more GR
      deletionindicator,           " Deletion indicator
      finalinvoice                " Final invoice indicator
    from zi_zlfc_gr_purchaseorderitems
    into table @data(lt_all_items)
    where purchaseorder = @lv_ebeln.


    " Read tax rates using CDS view
    select taxcode, taxrate
      from zi_zlfc_taxconfiguration
      into table @data(lt_tax_rates)
      where taxprocedure = @gc_constants-taxau.



    " Process items with filtering logic matching original code
    loop at lt_all_items into data(ls_item).
      " Skip excluded items (matching original logic)
      if ls_item-invoicereceipt is initial or           " GR flag not set
         ls_item-deliverycompleted is not initial or     " No more GR flag set
         ls_item-deletionindicator is not initial or     " Deletion indicator
         ls_item-finalinvoice is not initial or          " Final invoice indicator
         ls_item-acctasscat = 'X'.                       " Unknown account assignment
        continue.
      endif.

      " Skip if no quantity remaining
      if ls_item-quantity_remaining is initial.
        continue.
      endif.

      " Check authority for asset items
      if ls_item-acctasscat = 'A'.
        authority-check object 'A_B_ANLKL'
          id 'BUKRS' field rs_purchaseorder_deep-comp_code
          id 'ACTVT' field '01'.

        if sy-subrc ne 0.
          continue.  " Skip if no authority
        else.
          rs_purchaseorder_deep-has_asset = abap_true.
          ls_item-is_asset = abap_true.
        endif.
      endif.

      " Create item entry
      data: ls_po_item type zcl_zlfc_gr_mpc=>ts_purchaseorderitem.
      clear ls_po_item.

      ls_po_item-po_item = ls_item-po_item.
      ls_po_item-short_text = ls_item-short_text.
      ls_po_item-quantity = ls_item-quantity.
      ls_po_item-po_unit = ls_item-po_unit.
      ls_po_item-net_price = ls_item-net_price.
      ls_po_item-tax_code = ls_item-tax_code.
      ls_po_item-effective_value = ls_item-effective_value.
      ls_po_item-quantity_delivered = ls_item-quantity_delivered.
      ls_po_item-quantity_remaining = ls_item-quantity_remaining.
      ls_po_item-acctasscat = ls_item-acctasscat.
      ls_po_item-is_asset = ls_item-is_asset.



      if ls_po_item-tax_code is not initial.
        if ls_po_item-tax_code = 'P1'.
          ls_po_item-tax_rate = 10 / 100. "'0.1'. """fc just testing, will use FM ...
        endif.
      endif.

*          CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT'
*            EXPORTING
*              i_bukrs           = rs_purchaseorder_deep-comp_code
*              i_mwskz           = ls_po_item-tax_code
*              i_waers           = rs_purchaseorder_deep-currency
*              i_wrbtr           = 100
*            IMPORTING
*              e_fwnvv           = lv_nvv
*            TABLES
*              t_mwdat           = lt_mwdat
*            EXCEPTIONS
*              bukrs_not_found   = 1
*              country_not_found = 2
*              mwskz_not_defined = 3
*              mwskz_not_valid   = 4
*              ktosl_not_found   = 5
*              kalsm_not_found   = 6
*              parameter_error   = 7
*              knumh_not_found   = 8
*              kschl_not_found   = 9
*              unknown_error     = 10
*              account_not_found = 11
*              txjcd_not_valid   = 12
*              tdt_error         = 13
*              txa_error         = 14
*              OTHERS            = 15.
*      endif.

      " Convert effective value to BAPI format
      call function 'CURRENCY_AMOUNT_SAP_TO_BAPI'
        exporting
          currency    = rs_purchaseorder_deep-currency
          sap_amount  = ls_po_item-effective_value
        importing
          bapi_amount = ls_po_item-effective_value.



      append ls_po_item to rs_purchaseorder_deep-items.
    endloop.



    " Read asset assignments if needed
    if rs_purchaseorder_deep-has_asset = abap_true.
      select
        purchaseorderitem as po_item,
        assetnumber as asset_no,
        subnumber as sub_number
      from zi_gr_poassetassignments
      into corresponding fields of table @rs_purchaseorder_deep-assets
      where purchaseorder = @lv_ebeln.
    endif.

    " Handle VIM-specific logic if applicable
    if rs_purchaseorder_deep-vimdocid is not initial.
      " VIM-specific processing would go here
    endif.


*    " Update items with tax rates and convert values
*    loop at rs_purchaseorder_deep-items assigning field-symbol(<ls_item>).
*      " Convert effective value to BAPI format
*      call function 'CURRENCY_AMOUNT_SAP_TO_BAPI'
*        exporting
*          currency    = rs_purchaseorder_deep-currency
*          sap_amount  = <ls_item>-effective_value
*        importing
*          bapi_amount = <ls_item>-effective_value.
*
*      " Get tax rate
*      read table lt_tax_rates into data(ls_tax_rate)
*        with key taxcode = <ls_item>-tax_code.
*      if sy-subrc = 0.
*        <ls_item>-tax_rate = ls_tax_rate-taxrate.
*      endif.
*
*      " Check for asset items and authority
*      if <ls_item>-acctasscat = 'A'.
*        authority-check object 'A_B_ANLKL'
*          id 'BUKRS' field rs_purchaseorder_deep-comp_code
*          id 'ACTVT' field '01'.
*
*        if sy-subrc ne 0.
*          " Remove item if no authority
*          delete rs_purchaseorder_deep-items.
*          continue.
*        else.
*          rs_purchaseorder_deep-has_asset = abap_true.
*        endif.
*      endif.
*
*    endloop.




*    DATA: lo_message_container TYPE REF TO /iwbep/if_message_container,
*          lv_ebeln            TYPE ebeln,
*          ls_header           TYPE bapimepoheader,
*          lt_return           TYPE bapiret2_t,
*          lt_item             TYPE STANDARD TABLE OF bapimepoitem,
*          lt_history          TYPE STANDARD TABLE OF bapiekbe,
*          lt_history_total    TYPE STANDARD TABLE OF bapiekbes.
*
*    lo_message_container = get_message_container( ).
*
*    " Check if document is from VIM (12 digits)
*    IF strlen( iv_po_number ) = 12.
*      rs_purchaseorder_deep-vimdocid = iv_po_number.
*      lv_ebeln = iv_po_number(10).
*    ELSE.
*      lv_ebeln = iv_po_number.
*    ENDIF.
*
*    " Get PO details using BAPI
*    CALL FUNCTION 'BAPI_PO_GETDETAIL1'
*      EXPORTING
*        purchaseorder    = lv_ebeln
*      IMPORTING
*        poheader         = ls_header
*      TABLES
*        return           = lt_return
*        poitem           = lt_item
*        pohistory        = lt_history
*        pohistory_totals = lt_history_total.
*
*    IF ls_header-po_number IS INITIAL.
*      lo_message_container->add_messages_from_bapi(
*        it_bapi_messages = lt_return
*        iv_add_to_response_header = abap_true ).
*      RETURN.
*    ENDIF.
*
*    " Check if standard PO
*    IF ls_header-doc_type NE gc_constants-standard_po.
*      rs_purchaseorder_deep-excluded = abap_true.
*      rs_purchaseorder_deep-po_number = lv_ebeln.
*      RETURN.
*    ENDIF.
*
*    " Map header data
*    MOVE-CORRESPONDING ls_header TO rs_purchaseorder_deep.
*
*    " Check completion and approval status
*    rs_purchaseorder_deep-complete = xsdbool( ls_header-memory NE abap_true ).
*
*    SELECT SINGLE frgrl
*      FROM ekko
*      INTO @DATA(lv_frgrl)
*      WHERE ebeln = @ls_header-po_number.
*
*    rs_purchaseorder_deep-approved = xsdbool( lv_frgrl NE abap_true ).
*
*    " Get vendor name
*    SELECT SINGLE name1
*      FROM lfa1
*      INTO rs_purchaseorder_deep-vendor_name
*      WHERE lifnr = ls_header-vendor.
*
*    " All standard POs are MyFi enabled
*    rs_purchaseorder_deep-is_my_fi = abap_true.
*
*    " Get additional PO line data
*    SELECT ebelp, effwr
*      FROM ekpo
*      INTO TABLE @DATA(lt_po_line)
*      WHERE ebeln = @lv_ebeln.
*
*    " Get tax codes
*    SELECT tt~mwskz, kk~kbetr
*      FROM t007a AS tt
*      INNER JOIN a003 AS aa ON aa~mwskz = tt~mwskz
*      INNER JOIN konp AS kk ON kk~knumh = aa~knumh AND kk~kopos = '01'
*      INTO TABLE @DATA(lt_tax_code)
*      WHERE tt~kalsm = @gc_constants-taxau
*        AND tt~mwskz LIKE 'P%'
*        AND ( aa~kschl = 'ZZ02' OR aa~kschl = 'ZZ04' )
*        AND aa~aland = 'AU'.
*
*    " Process items
*    LOOP AT lt_item INTO DATA(ls_item).
*      " Skip excluded items
*      IF ls_item-gr_ind IS INITIAL OR
*         ls_item-no_more_gr IS NOT INITIAL OR
*         ls_item-delete_ind IS NOT INITIAL OR
*         ls_item-final_inv IS NOT INITIAL OR
*         ls_item-acctasscat = 'X'.
*        CONTINUE.
*      ENDIF.
*
*      DATA: ls_purchaseorder_item TYPE zcl_zlfc_gr_mpc=>ts_purchaseorderitem.
*      MOVE-CORRESPONDING ls_item TO ls_purchaseorder_item.
*
*      " Get effective value
*      READ TABLE lt_po_line INTO DATA(ls_po_line)
*        WITH KEY ebelp = ls_item-po_item.
*      IF sy-subrc = 0.
*        ls_purchaseorder_item-effective_value = ls_po_line-effwr.
*        CALL FUNCTION 'CURRENCY_AMOUNT_SAP_TO_BAPI'
*          EXPORTING
*            currency    = rs_purchaseorder_deep-currency
*            sap_amount  = ls_purchaseorder_item-effective_value
*          IMPORTING
*            bapi_amount = ls_purchaseorder_item-effective_value.
*
*        IF ls_item-delete_ind NE 'L'.
*          ADD ls_po_line-effwr TO rs_purchaseorder_deep-total_value.
*        ENDIF.
*      ENDIF.
*
*      " Check for assets
*      IF ls_item-acctasscat = 'A'.
*        AUTHORITY-CHECK OBJECT 'A_B_ANLKL'
*          ID 'BUKRS' FIELD rs_purchaseorder_deep-comp_code
*          ID 'ACTVT' FIELD '01'.
*
*        IF sy-subrc NE 0.
*          CONTINUE.
*        ELSE.
*          rs_purchaseorder_deep-has_asset = abap_true.
*          ls_purchaseorder_item-is_asset = abap_true.
*
*          " Load asset keys
*          SELECT ebelp AS po_item,
*                 anln1 AS asset_no,
*                 anln2 AS sub_number
*            FROM ekkn
*            APPENDING CORRESPONDING FIELDS OF TABLE @rs_purchaseorder_deep-assets
*            WHERE ebeln = @ls_header-po_number
*              AND ebelp = @ls_item-po_item.
*        ENDIF.
*      ENDIF.
*
*      " Calculate quantities
*      LOOP AT lt_history_total INTO DATA(ls_history_total)
*        WHERE po_item = ls_item-po_item.
*        ADD ls_history_total-deliv_qty TO ls_purchaseorder_item-quantity_delivered.
*      ENDLOOP.
*
*      ls_purchaseorder_item-quantity_remaining = ls_purchaseorder_item-quantity -
*                                                  ls_purchaseorder_item-quantity_delivered.
*
*      IF ls_purchaseorder_item-quantity_remaining IS INITIAL.
*        CONTINUE.
*      ENDIF.
*
*      " Get tax rate
*      READ TABLE lt_tax_code INTO DATA(ls_tax_code)
*        WITH KEY mwskz = ls_item-tax_code.
*      IF sy-subrc = 0.
*        ls_purchaseorder_item-tax_rate = ls_tax_code-kbetr / 1000.
*      ENDIF.
*
*      APPEND ls_purchaseorder_item TO rs_purchaseorder_deep-items.
*    ENDLOOP.
*
*    " Convert total value
*    CALL FUNCTION 'CURRENCY_AMOUNT_SAP_TO_BAPI'
*      EXPORTING
*        currency    = rs_purchaseorder_deep-currency
*        sap_amount  = rs_purchaseorder_deep-total_value
*      IMPORTING
*        bapi_amount = rs_purchaseorder_deep-total_value.





  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->READ_GOODS_RECEIPT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_MAT_DOC                     TYPE        MBLNR
* | [--->] IV_DOC_YEAR                    TYPE        MJAHR
* | [<-()] RS_GOODSRECEIPT_DEEP           TYPE        TY_GOODSRECEIPT_DEEP
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method read_goods_receipt.
    data: lo_message_container type ref to /iwbep/if_message_container,
          ls_header            type bapi2017_gm_head_02,
          lt_item_show         type standard table of bapi2017_gm_item_show,
          lt_return            type bapiret2_t.

    lo_message_container = get_message_container( ).

    " Read GR details using BAPI
    call function 'BAPI_GOODSMVT_GETDETAIL'
      exporting
        materialdocument = iv_mat_doc
        matdocumentyear  = iv_doc_year
      importing
        goodsmvt_header  = ls_header
      tables
        goodsmvt_items   = lt_item_show
        return           = lt_return.

    if lt_return is not initial.
      lo_message_container->add_messages_from_bapi(
        it_bapi_messages = lt_return
        iv_add_to_response_header = abap_true ).
      rs_goodsreceipt_deep-doc_year = '0001'.
      return.
    endif.

    " Build result structure
    rs_goodsreceipt_deep-mat_doc = iv_mat_doc.
    rs_goodsreceipt_deep-doc_year = iv_doc_year.
    rs_goodsreceipt_deep-username = ls_header-username.
    rs_goodsreceipt_deep-username_full = get_user_full_name( ls_header-username ).

    " Additional data from MSEG
    select zeile, shkzg
      from mseg
      into table @data(lt_mseg)
      where mblnr = @iv_mat_doc
        and mjahr = @iv_doc_year.

    " Process items
    loop at lt_item_show into data(ls_item).
      append value #(
        selected    = abap_true
        line_status = 'None'
        ref_doc_no  = ls_header-ref_doc_no
        header_txt  = ls_header-header_txt
        doc_date    = ls_header-doc_date
        matdoc_itm  = ls_item-matdoc_itm
        po_item     = ls_item-po_item
        entry_uom   = ls_item-entry_uom
        entry_qnt   = ls_item-entry_qnt
      ) to rs_goodsreceipt_deep-items.
    endloop.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->PURCHASEORDER_SAVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING(optional)
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING(optional)
* | [--->] IV_SOURCE_NAME                 TYPE        STRING(optional)
* | [--->] IO_DATA_PROVIDER               TYPE REF TO /IWBEP/IF_MGW_ENTRY_PROVIDER
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH(optional)
* | [--->] IO_EXPAND                      TYPE REF TO /IWBEP/IF_MGW_ODATA_EXPAND
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY_C(optional)
* | [<---] ER_DEEP_ENTITY                 TYPE REF TO DATA
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method purchaseorder_save.
    data: ls_purchaseorder_deep type ty_purchaseorder_deep.

    " Read the supplied data
    io_data_provider->read_entry_data( importing es_data = ls_purchaseorder_deep ).

    " Set the mode
    data(lv_validate_only) = xsdbool( ls_purchaseorder_deep-submit_flag ne abap_true ).

    " Create the goods receipt
    create_goods_receipt(
      exporting iv_test_mode = lv_validate_only
      changing  cs_purchaseorder_deep = ls_purchaseorder_deep ).

    " Response data
    copy_data_to_ref(
      exporting is_data = ls_purchaseorder_deep
      changing  cr_data = er_deep_entity ).
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->PURCHASEORDER_GET_EE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING(optional)
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING(optional)
* | [--->] IV_SOURCE_NAME                 TYPE        STRING(optional)
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH(optional)
* | [--->] IO_EXPAND                      TYPE REF TO /IWBEP/IF_MGW_ODATA_EXPAND(optional)
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY(optional)
* | [<---] ER_ENTITY                      TYPE REF TO DATA
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_ENTITY_CNTXT
* | [<---] ET_EXPANDED_CLAUSES            TYPE        STRING_TABLE
* | [<---] ET_EXPANDED_TECH_CLAUSES       TYPE        STRING_TABLE
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method purchaseorder_get_ee.
    data: ls_key type zcl_zlfc_gr_mpc=>ts_purchaseorder.

    " Get converted key
    io_tech_request_context->get_converted_keys( importing es_key_values = ls_key ).

    " Read PO using helper method
    data(ls_purchaseorder_deep) = read_purchase_order( ls_key-po_number ).

    " Return the data
    copy_data_to_ref(
      exporting is_data = ls_purchaseorder_deep
      changing  cr_data = er_entity ).

    " Return the expanded tech clauses
    et_expanded_tech_clauses = value #(
      ( |Items| )
      ( |Movements| )
      ( |MaterialDocuments| )
      ( |Assets| ) ).
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->PROCESS_GOODS_MOVEMENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_HEADER                      TYPE        BAPI2017_GM_HEAD_01
* | [--->] IS_PURCHASEORDER_DEEP          TYPE        TY_PURCHASEORDER_DEEP
* | [--->] IO_MESSAGE_CONTAINER           TYPE REF TO /IWBEP/IF_MESSAGE_CONTAINER
* | [<-->] CS_PURCHASEORDER_DEEP          TYPE        TY_PURCHASEORDER_DEEP
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method process_goods_movement.
    data: ls_goodsmvt_code    type bapi2017_gm_code,
          lt_goodsmvt_item    type table of bapi2017_gm_item_create,
          ls_materialdocument type zcl_zlfc_gr_mpc=>ts_materialdocument,
          lt_return           type bapiret2_t,
          lv_po_item          type ebelp.

    " GM code constant
    ls_goodsmvt_code-gm_code = '01'.

    " Prepare items for this header
    loop at is_purchaseorder_deep-movements into data(ls_movement)
      where doc_date   = is_header-doc_date
        and ref_doc_no = is_header-ref_doc_no
        and header_txt = is_header-header_txt.

      lv_po_item = ls_movement-po_item.  " Store for error message

      data(ls_item) = value bapi2017_gm_item_create(
        move_type = '101'
        mvt_ind   = 'B'
        po_number = is_purchaseorder_deep-po_number
        po_item   = ls_movement-po_item
        entry_qnt = ls_movement-entry_qnt ).

      " Get unit from items
      read table is_purchaseorder_deep-items into data(ls_po_item)
        with key po_item = ls_movement-po_item.
      if sy-subrc = 0.
        ls_item-entry_uom = ls_po_item-po_unit.
      endif.

      append ls_item to lt_goodsmvt_item.
    endloop.

    " Create goods movement
    clear: ls_materialdocument, lt_return.

    call function 'BAPI_GOODSMVT_CREATE'
      exporting
        goodsmvt_header  = is_header
        goodsmvt_code    = ls_goodsmvt_code
        testrun          = abap_false
      importing
        materialdocument = ls_materialdocument-mat_doc
        matdocumentyear  = ls_materialdocument-doc_year
      tables
        goodsmvt_item    = lt_goodsmvt_item
        return           = lt_return.

    if lt_return is not initial.
      handle_bapi_messages(
        it_return = lt_return
        io_message_container = io_message_container ).
    elseif ls_materialdocument-mat_doc is not initial.
      " Commit the transaction
      commit work and wait.
      if sy-subrc = 0.
        append ls_materialdocument to cs_purchaseorder_deep-materialdocuments.
      endif.
    else.
      message e002 with lv_po_item into data(lv_message).
      io_message_container->add_message(
        iv_msg_type = sy-msgty
        iv_msg_id = sy-msgid
        iv_msg_number = sy-msgno
        iv_msg_v1 = sy-msgv1
        iv_add_to_response_header = abap_true ).
    endif.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->PREPARE_GOODSMVT_ITEMS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_PURCHASEORDER_DEEP          TYPE        TY_PURCHASEORDER_DEEP
* | [--->] IS_MOVEMENT                    TYPE        ZCL_ZLFC_GR_MPC=>TS_PURCHASEORDERMOVEMENT
* | [<-()] RT_ITEMS                       TYPE        TT_GOODSMVT_ITEMS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method prepare_goodsmvt_items.
    data: ls_item type bapi2017_gm_item_create.

    loop at is_purchaseorder_deep-movements into data(ls_movement)
      where doc_date   = value #( is_purchaseorder_deep-movements[ 1 ]-doc_date optional )
        and ref_doc_no = value #( is_purchaseorder_deep-movements[ 1 ]-ref_doc_no optional )
        and header_txt = value #( is_purchaseorder_deep-movements[ 1 ]-header_txt optional ).

      clear ls_item.
      ls_item-move_type = '101'.
      ls_item-mvt_ind   = 'B'.
      ls_item-po_number = is_purchaseorder_deep-po_number.
      ls_item-po_item   = ls_movement-po_item.
      ls_item-entry_qnt = ls_movement-entry_qnt.

      " Get unit from items
      read table is_purchaseorder_deep-items into data(ls_po_item)
        with key po_item = ls_movement-po_item.
      if sy-subrc = 0.
        ls_item-entry_uom = ls_po_item-po_unit.
      endif.

      append ls_item to rt_items.
    endloop.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->PREPARE_GOODSMVT_HEADER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_MOVEMENT                    TYPE        ZCL_ZLFC_GR_MPC=>TS_PURCHASEORDERMOVEMENT
* | [<-()] RS_HEADER                      TYPE        BAPI2017_GM_HEAD_01
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method prepare_goodsmvt_header.
    rs_header-pstng_date = sy-datum.
    rs_header-doc_date   = is_movement-doc_date.
    rs_header-ref_doc_no = is_movement-ref_doc_no.
    rs_header-header_txt = is_movement-header_txt.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->HANDLE_BAPI_MESSAGES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_RETURN                      TYPE        BAPIRET2_T
* | [--->] IO_MESSAGE_CONTAINER           TYPE REF TO /IWBEP/IF_MESSAGE_CONTAINER
* | [--->] IS_MOVEMENT                    TYPE        ZCL_ZLFC_GR_MPC=>TS_PURCHASEORDERMOVEMENT(optional)
* | [<-->] CS_PURCHASEORDER_DEEP          TYPE        TY_PURCHASEORDER_DEEP(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method handle_bapi_messages.
    " Process BAPI messages and convert to custom messages where needed
    loop at it_return into data(ls_return)
      where type = gc_constants-error.

      case ls_return-id.
        when 'BS'.
          if ls_return-number = '013'.
            " Custom WBS/IO message
            add_custom_error_message(
              io_message_container = io_message_container
              iv_msgid = 'ZFSS_GR'
              iv_msgno = '009'
              iv_msgv1 = ls_return-message_v2
              iv_msgv2 = |PO Item { format_alpha_output( is_movement-po_item ) }|
              iv_msgv3 = conv #( gc_constants-ap_name )
              iv_msgv4 = conv #( gc_constants-ap_email ) ).
          endif.

        when 'M7'.
          if ls_return-number = '161' or ls_return-number = '160'.
            " Custom GL message
            add_custom_error_message(
              io_message_container = io_message_container
              iv_msgid = 'ZFSS_GR'
              iv_msgno = '009'
              iv_msgv1 = |G/L Account { ls_return-message_v1 }|
              iv_msgv2 = |PO Item { format_alpha_output( is_movement-po_item ) }|
              iv_msgv3 = conv #( gc_constants-ap_name )
              iv_msgv4 = conv #( gc_constants-ap_email ) ).
          endif.

        when 'KI'.
          if ls_return-number = '260'.
            " Custom CC message
            add_custom_error_message(
              io_message_container = io_message_container
              iv_msgid = 'ZFSS_GR'
              iv_msgno = '009'
              iv_msgv1 = |Cost Centre { ls_return-message_v2 }|
              iv_msgv2 = |PO Item { format_alpha_output( is_movement-po_item ) }|
              iv_msgv3 = conv #( gc_constants-ap_name )
              iv_msgv4 = conv #( gc_constants-ap_email ) ).
          endif.

        when others.
          " Add original message
          io_message_container->add_message_from_bapi(
            is_bapi_message = ls_return
            iv_add_to_response_header = abap_true
            iv_message_target = '' ).
      endcase.
    endloop.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->GOODSRECEIPT_SAVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING(optional)
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING(optional)
* | [--->] IV_SOURCE_NAME                 TYPE        STRING(optional)
* | [--->] IO_DATA_PROVIDER               TYPE REF TO /IWBEP/IF_MGW_ENTRY_PROVIDER
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH(optional)
* | [--->] IO_EXPAND                      TYPE REF TO /IWBEP/IF_MGW_ODATA_EXPAND
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY_C(optional)
* | [<---] ER_DEEP_ENTITY                 TYPE REF TO DATA
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method goodsreceipt_save.
    data: ls_goodsreceipt_deep type ty_goodsreceipt_deep.

    " Read the supplied data
    io_data_provider->read_entry_data( importing es_data = ls_goodsreceipt_deep ).

    " Cancel the goods receipt
    cancel_goods_receipt( changing cs_goodsreceipt_deep = ls_goodsreceipt_deep ).

    " Response data
    copy_data_to_ref(
      exporting is_data = ls_goodsreceipt_deep
      changing  cr_data = er_deep_entity ).
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->GOODSRECEIPT_GET_EE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING(optional)
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING(optional)
* | [--->] IV_SOURCE_NAME                 TYPE        STRING(optional)
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH(optional)
* | [--->] IO_EXPAND                      TYPE REF TO /IWBEP/IF_MGW_ODATA_EXPAND(optional)
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY(optional)
* | [<---] ER_ENTITY                      TYPE REF TO DATA
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_ENTITY_CNTXT
* | [<---] ET_EXPANDED_CLAUSES            TYPE        STRING_TABLE
* | [<---] ET_EXPANDED_TECH_CLAUSES       TYPE        STRING_TABLE
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method goodsreceipt_get_ee.
    data: ls_key type zcl_zlfc_gr_mpc=>ts_goodsreceipt.

    " Get converted key
    io_tech_request_context->get_converted_keys( importing es_key_values = ls_key ).

    " If year is blank, look it up
    if ls_key-doc_year is initial.
      select single mjahr
        into ls_key-doc_year
        from mkpf
        where mblnr = ls_key-mat_doc.
    endif.

    " Read GR using helper method
    data(ls_goodsreceipt_deep) = read_goods_receipt(
      iv_mat_doc = ls_key-mat_doc
      iv_doc_year = ls_key-doc_year ).

    " Return the data
    copy_data_to_ref(
      exporting is_data = ls_goodsreceipt_deep
      changing  cr_data = er_entity ).

    " Return the expanded tech clauses
    et_expanded_tech_clauses = value #(
      ( |Items| )
      ( |MaterialDocuments| ) ).
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->GET_USER_FULL_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_USERNAME                    TYPE        XUBNAME
* | [<-()] RV_NAME                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method get_user_full_name.
    select single name_text
      from v_usr_name
      into rv_name
      where bname = iv_username.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->GET_MESSAGE_CONTAINER
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_CONTAINER                   TYPE REF TO /IWBEP/IF_MESSAGE_CONTAINER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method get_message_container.
    ro_container = mo_context->get_message_container( ).
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->GET_EMPLOYEE_DETAILS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_USERNAME                    TYPE        XUBNAME
* | [<-()] RV_NAME                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method get_employee_details.
    data: lv_pernr type pernr_d,
          lv_usrid type sysid.

    lv_usrid = iv_username.

    " Try direct employee number
    lv_pernr = |{ iv_username alpha = in }|.

    select single pernr
      from pa0001
      into @lv_pernr
      where pernr = @lv_pernr.

    " If not found, try via user ID
    if sy-subrc ne 0.
      select single pernr
        from pa0105
        into @lv_pernr
        where usrid = @lv_usrid
          and subty = '0001'.
    endif.

    " Get employee name
    if lv_pernr is not initial.
      select single nachn as lastname,
                    vorna as firstname,
                    titel as title
        from pa0002
        into @data(ls_name)
        where pernr = @lv_pernr
          and begda <= @sy-datum
          and endda >= @sy-datum.

      if sy-subrc = 0.
        rv_name = |{ ls_name-title } { ls_name-firstname } { ls_name-lastname }|.
        condense rv_name.
      endif.
    endif.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->FORMAT_ALPHA_OUTPUT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_INPUT                       TYPE        ANY
* | [<-()] RV_OUTPUT                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method format_alpha_output.
    call function 'CONVERSION_EXIT_ALPHA_OUTPUT'
      exporting
        input  = iv_input
      importing
        output = rv_output.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->CREATE_GOODS_RECEIPT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TEST_MODE                   TYPE        ABAP_BOOL
* | [<-->] CS_PURCHASEORDER_DEEP          TYPE        TY_PURCHASEORDER_DEEP
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method create_goods_receipt.
    data: lo_message_container type ref to /iwbep/if_message_container,
          lt_goodsmvt_headers  type standard table of bapi2017_gm_head_01,
          lv_gr_value          type bapicurr_d.

    lo_message_container = get_message_container( ).

    " Clear results area
    clear cs_purchaseorder_deep-materialdocuments.

    " Calculate GR value for validation
    loop at cs_purchaseorder_deep-movements into data(ls_mv).
      add ls_mv-entry_qnt to lv_gr_value.
    endloop.
    cs_purchaseorder_deep-gr_value = lv_gr_value.

    " Validate if in test mode
    if iv_test_mode = abap_true.
      data(lv_has_errors) = validate_goods_receipt_items(
        is_purchaseorder_deep = cs_purchaseorder_deep
        io_message_container = lo_message_container ).

      if lv_has_errors = abap_true.
        return.
      endif.
    endif.

    " Group movements by header characteristics
    loop at cs_purchaseorder_deep-movements into data(ls_movement).
      data(ls_header) = prepare_goodsmvt_header( ls_movement ).
      collect ls_header into lt_goodsmvt_headers.
    endloop.

    " Process each grouped GR
    if iv_test_mode = abap_false.
      loop at lt_goodsmvt_headers into ls_header.
        process_goods_movement(
          exporting
            is_header = ls_header
            is_purchaseorder_deep = cs_purchaseorder_deep
            io_message_container = lo_message_container
          changing
            cs_purchaseorder_deep = cs_purchaseorder_deep ).
      endloop.
    endif.

    " Sort and remove duplicates for display
    sort cs_purchaseorder_deep-materialdocuments by doc_year mat_doc.
    delete adjacent duplicates from cs_purchaseorder_deep-materialdocuments.

    " Clear movements if successfully posted
    data(lv_msgty) = lo_message_container->get_worst_message_type( ).
    if iv_test_mode = abap_false and
       lv_msgty ne /iwbep/if_message_container=>gcs_message_type-error and
       lv_msgty ne /iwbep/if_message_container=>gcs_message_type-abort and
       lv_msgty ne /iwbep/if_message_container=>gcs_message_type-termination.
      clear cs_purchaseorder_deep-movements.
    endif.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->CHECK_FIELD_IS_OFF
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_FELEI                       TYPE        FELEI
* | [--->] IV_FEGRU                       TYPE        FEGRU
* | [<-()] RV_IS_OFF                      TYPE        SAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method check_field_is_off.
    select single fnein
      from t082g
      into rv_is_off
      where fegtb = 'A'
        and felei = iv_felei
        and fegru = iv_fegru.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->CANCEL_GOODS_RECEIPT
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CS_GOODSRECEIPT_DEEP           TYPE        TY_GOODSRECEIPT_DEEP
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method cancel_goods_receipt.
    data: lo_message_container type ref to /iwbep/if_message_container,
          lt_return            type bapiret2_t,
          ls_return            type bapiret2,
          lt_gr_item           type standard table of bapi2017_gm_item_04,
          ls_result            type bapi2017_gm_head_ret.

    lo_message_container = get_message_container( ).

    " Get GR items to cancel
    loop at cs_goodsreceipt_deep-items into data(ls_item)
      where selected = abap_true.
      append value #( matdoc_item = ls_item-matdoc_itm ) to lt_gr_item.
    endloop.

    " Cancel the GR
    call function 'BAPI_GOODSMVT_CANCEL'
      exporting
        materialdocument    = cs_goodsreceipt_deep-mat_doc
        matdocumentyear     = cs_goodsreceipt_deep-doc_year
      importing
        goodsmvt_headret    = ls_result
      tables
        return              = lt_return
        goodsmvt_matdocitem = lt_gr_item.

    if lt_return is not initial.
      handle_bapi_messages(
        it_return = lt_return
        io_message_container = lo_message_container ).
    elseif ls_result-mat_doc is not initial.
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          wait   = abap_true
        importing
          return = ls_return.

      if ls_return is not initial.
        lo_message_container->add_message_from_bapi(
          is_bapi_message = ls_return
          iv_add_to_response_header = abap_true
          iv_message_target = '' ).
      else.
        append value #(
          mat_doc = ls_result-mat_doc
          doc_year = ls_result-doc_year
        ) to cs_goodsreceipt_deep-materialdocuments.
      endif.
    endif.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZLFC_GR_DPC_EXT->ASSETS_GET_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IO_REQUEST_OBJECT              TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY(optional)
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [<---] ER_ENTITY                      TYPE        ZCL_ZLFC_GR_MPC=>TS_ASSET
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_ENTITY_CNTXT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method assets_get_entity.
    data: lv_felei type felei.

    " Get converted key
    io_tech_request_context->get_converted_keys( importing es_key_values = er_entity ).

    " Get asset detail
    select single
           anla~anlkl as assetclass,
           anla~invzu as note,
           anla~invnr as invent_no,
           anla~sernr as serial_no,
           anlh~anlhtxt as main_descript,
           anlz~kostl as costcenter,
           anlz~stort as location,
           anlz~raumn as room,
           anlz~kfzkz as plate_no
      from anla
      inner join anlz on  anlz~bukrs = anla~bukrs
                      and anlz~anln1 = anla~anln1
                      and anlz~anln2 = anla~anln2
      left outer join anlh on  anlh~bukrs = anla~bukrs
                            and anlh~anln1 = anla~anln1
      into corresponding fields of @er_entity
      where anla~bukrs = @er_entity-comp_code
        and anla~anln1 = @er_entity-asset_no
        and anla~anln2 = @er_entity-sub_number
        and anlz~bdatu >= @sy-datum
        and anlz~adatu <= @sy-datum.

    " Get field layout
    select single felei
      from anka
      into @lv_felei
      where anlkl = @er_entity-assetclass.

    " Set field visibility based on layout
    er_entity-main_descript_off = check_field_is_off( iv_felei = lv_felei iv_fegru = '07' ).
    er_entity-note_off          = check_field_is_off( iv_felei = lv_felei iv_fegru = '37' ).
    er_entity-invent_no_off     = check_field_is_off( iv_felei = lv_felei iv_fegru = '04' ).
    er_entity-serial_no_off     = check_field_is_off( iv_felei = lv_felei iv_fegru = '75' ).
    er_entity-room_off          = check_field_is_off( iv_felei = lv_felei iv_fegru = '19' ).
    er_entity-plate_no_off      = check_field_is_off( iv_felei = lv_felei iv_fegru = '14' ).
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZLFC_GR_DPC_EXT->ASSETS_CREATE_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY_C(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [--->] IO_DATA_PROVIDER               TYPE REF TO /IWBEP/IF_MGW_ENTRY_PROVIDER(optional)
* | [<---] ER_ENTITY                      TYPE        ZCL_ZLFC_GR_MPC=>TS_ASSET
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method assets_create_entity.
    data: lo_message_container  type ref to /iwbep/if_message_container,
          ls_generaldata        type bapi1022_feglg001,
          ls_generaldatax       type bapi1022_feglg001x,
          ls_inventory          type bapi1022_feglg011,
          ls_inventoryx         type bapi1022_feglg011x,
          ls_timedependentdata  type bapi1022_feglg003,
          ls_timedependentdatax type bapi1022_feglg003x,
          ls_return             type bapiret2,
          lv_msgv1              type symsgv.

    lo_message_container = get_message_container( ).

    " Read the supplied data
    io_data_provider->read_entry_data( importing es_data = er_entity ).

    " Prepare BAPI structures based on field visibility
    if er_entity-serial_no_off ne abap_true.
      ls_generaldata-serial_no = er_entity-serial_no.
      ls_generaldatax-serial_no = abap_true.
    endif.

    if er_entity-invent_no_off ne abap_true.
      ls_generaldata-invent_no = er_entity-invent_no.
      ls_generaldatax-invent_no = abap_true.
    endif.

    if er_entity-main_descript_off ne abap_true.
      ls_generaldata-main_descript = er_entity-main_descript.
      ls_generaldatax-main_descript = abap_true.
      ls_generaldata-descript = er_entity-main_descript.
      ls_generaldatax-descript = abap_true.
    endif.

    if er_entity-note_off ne abap_true.
      ls_inventory-note = er_entity-note.
      ls_inventoryx-note = abap_true.
    endif.

    " Time-dependent data
    ls_timedependentdata-from_date = sy-datum.
    ls_timedependentdata-to_date = '99991231'.

    if er_entity-plate_no_off ne abap_true.
      ls_timedependentdata-plate_no = er_entity-plate_no.
      ls_timedependentdatax-license_plate_no = abap_true.
    endif.

    if er_entity-room_off ne abap_true and
       er_entity-room_locked ne abap_true.
      ls_timedependentdata-room = er_entity-room.
      ls_timedependentdatax-room = abap_true.
    endif.

    " Update asset using BAPI
    call function 'BAPI_FIXEDASSET_CHANGE'
      exporting
        companycode        = er_entity-comp_code
        asset              = er_entity-asset_no
        subnumber          = er_entity-sub_number
        generaldata        = ls_generaldata
        generaldatax       = ls_generaldatax
        inventory          = ls_inventory
        inventoryx         = ls_inventoryx
        timedependentdata  = ls_timedependentdata
        timedependentdatax = ls_timedependentdatax
      importing
        return             = ls_return.

    if ls_return-type = gc_constants-success.
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          wait   = abap_true
        importing
          return = ls_return.

      if sy-subrc = 0.
        er_entity-asset_no = format_alpha_output( er_entity-asset_no ).
        er_entity-sub_number = format_alpha_output( er_entity-sub_number ).

        lv_msgv1 = |{ er_entity-asset_no } - { er_entity-sub_number }|.
        message s012 into data(lv_dummy).

        add_custom_error_message(
          io_message_container = lo_message_container
          iv_msgid = sy-msgid
          iv_msgno = sy-msgno
          iv_msgv1 = lv_msgv1 ).
      else.
        add_custom_error_message(
          io_message_container = lo_message_container
          iv_msgid = sy-msgid
          iv_msgno = sy-msgno
          iv_msgv1 = sy-msgv1
          iv_msgv2 = sy-msgv2
          iv_msgv3 = sy-msgv3
          iv_msgv4 = sy-msgv4 ).
      endif.
    else.
      if ls_return is not initial.
        lo_message_container->add_message_from_bapi(
          is_bapi_message = ls_return
          iv_add_to_response_header = abap_true
          iv_message_target = '' ).
      else.
        add_custom_error_message(
          io_message_container = lo_message_container
          iv_msgid = sy-msgid
          iv_msgno = sy-msgno
          iv_msgv1 = sy-msgv1
          iv_msgv2 = sy-msgv2
          iv_msgv3 = sy-msgv3
          iv_msgv4 = sy-msgv4 ).
      endif.
    endif.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ZLFC_GR_DPC_EXT->ADD_CUSTOM_ERROR_MESSAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_MESSAGE_CONTAINER           TYPE REF TO /IWBEP/IF_MESSAGE_CONTAINER
* | [--->] IV_MSGID                       TYPE        SYMSGID
* | [--->] IV_MSGNO                       TYPE        SYMSGNO
* | [--->] IV_MSGV1                       TYPE        SYMSGV(optional)
* | [--->] IV_MSGV2                       TYPE        SYMSGV(optional)
* | [--->] IV_MSGV3                       TYPE        SYMSGV(optional)
* | [--->] IV_MSGV4                       TYPE        SYMSGV(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method add_custom_error_message.
    io_message_container->add_message(
      iv_msg_type = gc_constants-success
      iv_msg_id = iv_msgid
      iv_msg_number = iv_msgno
      iv_msg_v1 = iv_msgv1
      iv_msg_v2 = iv_msgv2
      iv_msg_v3 = iv_msgv3
      iv_msg_v4 = iv_msgv4
      iv_add_to_response_header = abap_true ).
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ZLFC_GR_DPC_EXT->/IWBEP/IF_MGW_APPL_SRV_RUNTIME~GET_EXPANDED_ENTITYSET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING(optional)
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING(optional)
* | [--->] IV_SOURCE_NAME                 TYPE        STRING(optional)
* | [--->] IT_FILTER_SELECT_OPTIONS       TYPE        /IWBEP/T_MGW_SELECT_OPTION(optional)
* | [--->] IT_ORDER                       TYPE        /IWBEP/T_MGW_SORTING_ORDER(optional)
* | [--->] IS_PAGING                      TYPE        /IWBEP/S_MGW_PAGING(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH(optional)
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR(optional)
* | [--->] IV_FILTER_STRING               TYPE        STRING(optional)
* | [--->] IV_SEARCH_STRING               TYPE        STRING(optional)
* | [--->] IO_EXPAND                      TYPE REF TO /IWBEP/IF_MGW_ODATA_EXPAND(optional)
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITYSET(optional)
* | [<---] ER_ENTITYSET                   TYPE REF TO DATA
* | [<---] ET_EXPANDED_CLAUSES            TYPE        STRING_TABLE
* | [<---] ET_EXPANDED_TECH_CLAUSES       TYPE        STRING_TABLE
* | [<---] ES_RESPONSE_CONTEXT            TYPE        TY_S_MGW_RESPONSE_CONTEXT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method /iwbep/if_mgw_appl_srv_runtime~get_expanded_entityset.
    " This method needs to be redefined for expanded entity to work
    " No implementation required
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ZLFC_GR_DPC_EXT->/IWBEP/IF_MGW_APPL_SRV_RUNTIME~GET_EXPANDED_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING(optional)
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING(optional)
* | [--->] IV_SOURCE_NAME                 TYPE        STRING(optional)
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH(optional)
* | [--->] IO_EXPAND                      TYPE REF TO /IWBEP/IF_MGW_ODATA_EXPAND(optional)
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY(optional)
* | [<---] ER_ENTITY                      TYPE REF TO DATA
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_ENTITY_CNTXT
* | [<---] ET_EXPANDED_CLAUSES            TYPE        STRING_TABLE
* | [<---] ET_EXPANDED_TECH_CLAUSES       TYPE        STRING_TABLE
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method /iwbep/if_mgw_appl_srv_runtime~get_expanded_entity.
    data: lv_methodname type tmdir-methodname.

    try.
        lv_methodname = |{ iv_entity_name }_GET_EE|.
        translate lv_methodname to upper case.

        call method (lv_methodname)
          exporting
            iv_entity_name           = iv_entity_name
            iv_entity_set_name       = iv_entity_set_name
            iv_source_name           = iv_source_name
            it_key_tab               = it_key_tab
            it_navigation_path       = it_navigation_path
            io_expand                = io_expand
            io_tech_request_context  = io_tech_request_context
          importing
            er_entity                = er_entity
            es_response_context      = es_response_context
            et_expanded_clauses      = et_expanded_clauses
            et_expanded_tech_clauses = et_expanded_tech_clauses.

      catch cx_sy_dyn_call_illegal_method.
        " Method not found - no action required
    endtry.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ZLFC_GR_DPC_EXT->/IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING(optional)
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING(optional)
* | [--->] IV_SOURCE_NAME                 TYPE        STRING(optional)
* | [--->] IO_DATA_PROVIDER               TYPE REF TO /IWBEP/IF_MGW_ENTRY_PROVIDER
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH(optional)
* | [--->] IO_EXPAND                      TYPE REF TO /IWBEP/IF_MGW_ODATA_EXPAND
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY_C(optional)
* | [<---] ER_DEEP_ENTITY                 TYPE REF TO DATA
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method /iwbep/if_mgw_appl_srv_runtime~create_deep_entity.
    data: lv_methodname type tmdir-methodname.

    try.
        lv_methodname = |{ iv_entity_name }_SAVE|.
        translate lv_methodname to upper case.

        call method (lv_methodname)
          exporting
            iv_entity_name          = iv_entity_name
            iv_entity_set_name      = iv_entity_set_name
            iv_source_name          = iv_source_name
            io_data_provider        = io_data_provider
            it_key_tab              = it_key_tab
            it_navigation_path      = it_navigation_path
            io_expand               = io_expand
            io_tech_request_context = io_tech_request_context
          importing
            er_deep_entity          = er_deep_entity.

      catch cx_sy_dyn_call_illegal_method.
        " Method not found - no action required
    endtry.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZLFC_GR_DPC_EXT->PURCHASEORDERLOO_GET_ENTITYSET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_FILTER_SELECT_OPTIONS       TYPE        /IWBEP/T_MGW_SELECT_OPTION
* | [--->] IS_PAGING                      TYPE        /IWBEP/S_MGW_PAGING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [--->] IT_ORDER                       TYPE        /IWBEP/T_MGW_SORTING_ORDER
* | [--->] IV_FILTER_STRING               TYPE        STRING
* | [--->] IV_SEARCH_STRING               TYPE        STRING
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITYSET(optional)
* | [<---] ET_ENTITYSET                   TYPE        ZCL_ZLFC_GR_MPC=>TT_PURCHASEORDERLOOKUP
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method purchaseorderloo_get_entityset.

*-------------------------------------------------------------
*  Data declaration
*-------------------------------------------------------------
    data lo_filter type  ref to /iwbep/if_mgw_req_filter.
    data lt_filter_select_options type /iwbep/t_mgw_select_option.
    data lv_filter_str type string.
    data lv_max_hits type i.
    data ls_paging type /iwbep/s_mgw_paging.
    data ls_converted_keys like line of et_entityset.
    data ls_message type bapiret2.
    data lt_selopt type ddshselops.
    data ls_selopt like line of lt_selopt.
    data ls_filter type /iwbep/s_mgw_select_option.
    data ls_filter_range type /iwbep/s_cod_select_option.
    data lr_abn like range of ls_converted_keys-abn.
    data ls_abn like line of lr_abn.
    data lr_vendor_name_m_c like range of ls_converted_keys-vendor_name_m_c.
    data ls_vendor_name_m_c like line of lr_vendor_name_m_c.
    data lr_wbs_element like range of ls_converted_keys-wbs_element.
    data ls_wbs_element like line of lr_wbs_element.
    data lr_costcenter like range of ls_converted_keys-costcenter.
    data ls_costcenter like line of lr_costcenter.
    data lr_oa_number like range of ls_converted_keys-oa_number.
    data ls_oa_number like line of lr_oa_number.
    data lr_vendor like range of ls_converted_keys-vendor.
    data ls_vendor like line of lr_vendor.
    data lr_creat_date like range of ls_converted_keys-creat_date.
    data ls_creat_date like line of lr_creat_date.
    data lr_po_number like range of ls_converted_keys-po_number.
    data ls_po_number like line of lr_po_number.
    data lr_vendor_name like range of ls_converted_keys-vendor_name.
    data ls_vendor_name like line of lr_vendor_name.
    data l_pspnr type ps_posnr.
    data l_shlpname type shlpname.
    data lt_result_list type /iwbep/if_sb_gendpc_shlp_data=>tt_result_list.
    data lv_next type i value 1.
    data ls_entityset like line of et_entityset.
    data ls_result_list_next like line of lt_result_list.
    data ls_result_list like line of lt_result_list.

    check is_paging-skip eq 0.

*-------------------------------------------------------------
*  Map the runtime request to the Search Help select option - Only mapped attributes
*-------------------------------------------------------------
* Get all input information from the technical request context object
* Since DPC works with internal property names and runtime API interface holds external property names
* the process needs to get the all needed input information from the technical request context object
* Get filter or select option information
    lo_filter = io_tech_request_context->get_filter( ).
    lt_filter_select_options = lo_filter->get_filter_select_options( ).
    lv_filter_str = lo_filter->get_filter_string( ).

* Check if the supplied filter is supported by standard gateway runtime process
    if  lv_filter_str            is not initial
    and lt_filter_select_options is initial.
      " If the string of the Filter System Query Option is not automatically converted into
      " filter option table (lt_filter_select_options), then the filtering combination is not supported
      " Log message in the application log
      me->/iwbep/if_sb_dpc_comm_services~log_message(
        exporting
          iv_msg_type   = 'E'
          iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
          iv_msg_number = 025 ).
      " Raise Exception
      raise exception type /iwbep/cx_mgw_tech_exception
        exporting
          textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    endif.

    if lt_filter_select_options is initial.
    else.

* Get key table information
      io_tech_request_context->get_converted_source_keys(
        importing
          es_key_values  = ls_converted_keys ).

      ls_paging-top = io_tech_request_context->get_top( ).
      ls_paging-skip = io_tech_request_context->get_skip( ).

      " Calculate the number of max hits to be fetched from the function module
      " The lv_max_hits value is a summary of the Top and Skip values
      if ls_paging-top > 0.
        lv_max_hits = is_paging-top + is_paging-skip.
      endif.

      read table lt_filter_select_options into ls_filter
        with key property = 'WBS_ELEMENT'.
      if sy-subrc = 0.
        l_shlpname = 'ZLFC_SH_PO1'.
      else.
        l_shlpname = 'ZLFC_SH_PO0'.
      endif.

* Maps filter table lines to the Search Help select option table
      loop at lt_filter_select_options into ls_filter.

        case ls_filter-property.
          when 'ABN'.              " Equivalent to 'Abn' property in the service
            lo_filter->convert_select_option(
              exporting
                is_select_option = ls_filter
              importing
                et_select_option = lr_abn ).

            loop at lr_abn into ls_abn.
              ls_selopt-sign = ls_abn-sign.
              ls_selopt-option = ls_abn-option.
              ls_selopt-low = ls_abn-low.
              ls_selopt-high = ls_abn-high.
              ls_selopt-shlpfield = 'ABN'.
              ls_selopt-shlpname = l_shlpname.
              append ls_selopt to lt_selopt.
              clear ls_selopt.
            endloop.
          when 'VENDOR_NAME_M_C'.              " Equivalent to 'VendorNameMC' property in the service
            lo_filter->convert_select_option(
              exporting
                is_select_option = ls_filter
              importing
                et_select_option = lr_vendor_name_m_c ).

            loop at lr_vendor_name_m_c into ls_vendor_name_m_c.
              ls_selopt-sign = ls_vendor_name_m_c-sign.
              ls_selopt-option = ls_vendor_name_m_c-option.
              ls_selopt-low = ls_vendor_name_m_c-low.
              ls_selopt-high = ls_vendor_name_m_c-high.
              translate ls_selopt-low  to upper case.
              translate ls_selopt-high to upper case.
              ls_selopt-shlpfield = 'VENDOR_NAME_M_C'.
              ls_selopt-shlpname = l_shlpname.
              append ls_selopt to lt_selopt.
              clear ls_selopt.
            endloop.
          when 'WBS_ELEMENT'.              " Equivalent to 'WbsElement' property in the service
            lo_filter->convert_select_option(
              exporting
                is_select_option = ls_filter
              importing
                et_select_option = lr_wbs_element ).

            loop at lr_wbs_element into ls_wbs_element.
              ls_selopt-sign = ls_wbs_element-sign.
              ls_selopt-option = ls_wbs_element-option.
              ls_selopt-low = ls_wbs_element-low.
              ls_selopt-high = ls_wbs_element-high.
              translate ls_selopt-low  to upper case.
              translate ls_selopt-high to upper case.
              ls_selopt-shlpfield = 'WBS_ELEMENT'.
              ls_selopt-shlpname = l_shlpname.
              append ls_selopt to lt_selopt.
              clear ls_selopt.
            endloop.
          when 'COSTCENTER'.              " Equivalent to 'Costcenter' property in the service
            lo_filter->convert_select_option(
              exporting
                is_select_option = ls_filter
              importing
                et_select_option = lr_costcenter ).

            loop at lr_costcenter into ls_costcenter.
              ls_selopt-sign = ls_costcenter-sign.
              ls_selopt-option = ls_costcenter-option.
              ls_selopt-low = ls_costcenter-low.
              ls_selopt-high = ls_costcenter-high.
              ls_selopt-shlpfield = 'COSTCENTER'.
              ls_selopt-shlpname = l_shlpname.
              append ls_selopt to lt_selopt.
              clear ls_selopt.
            endloop.
          when 'OA_NUMBER'.              " Equivalent to 'OaNumber' property in the service
            lo_filter->convert_select_option(
              exporting
                is_select_option = ls_filter
              importing
                et_select_option = lr_oa_number ).

            loop at lr_oa_number into ls_oa_number.
              ls_selopt-sign = ls_oa_number-sign.
              ls_selopt-option = ls_oa_number-option.
              ls_selopt-low = ls_oa_number-low.
              ls_selopt-high = ls_oa_number-high.
              ls_selopt-shlpfield = 'OA_NUMBER'.
              ls_selopt-shlpname = l_shlpname.
              append ls_selopt to lt_selopt.
              clear ls_selopt.
            endloop.
          when 'VENDOR'.              " Equivalent to 'Vendor' property in the service
            lo_filter->convert_select_option(
              exporting
                is_select_option = ls_filter
              importing
                et_select_option = lr_vendor ).

            loop at lr_vendor into ls_vendor.
              ls_selopt-sign = ls_vendor-sign.
              ls_selopt-option = ls_vendor-option.
              ls_selopt-low = ls_vendor-low.
              ls_selopt-high = ls_vendor-high.
              ls_selopt-shlpfield = 'VENDOR'.
              ls_selopt-shlpname = l_shlpname.
              append ls_selopt to lt_selopt.
              clear ls_selopt.
            endloop.
          when 'CREAT_DATE'.              " Equivalent to 'CreatDate' property in the service
            lo_filter->convert_select_option(
              exporting
                is_select_option = ls_filter
              importing
                et_select_option = lr_creat_date ).

            loop at lr_creat_date into ls_creat_date.
              ls_selopt-sign = ls_creat_date-sign.
              ls_selopt-option = ls_creat_date-option.
              add 1 to ls_creat_date-low.
              add 1 to ls_creat_date-high.
              ls_selopt-low = ls_creat_date-low.
              ls_selopt-high = ls_creat_date-high.
              ls_selopt-shlpfield = 'CREAT_DATE'.
              ls_selopt-shlpname = l_shlpname.
              append ls_selopt to lt_selopt.
              clear ls_selopt.
            endloop.
          when 'PO_NUMBER'.              " Equivalent to 'PoNumber' property in the service
            lo_filter->convert_select_option(
              exporting
                is_select_option = ls_filter
              importing
                et_select_option = lr_po_number ).

            loop at lr_po_number into ls_po_number.
              ls_selopt-sign = ls_po_number-sign.
              ls_selopt-option = ls_po_number-option.
              ls_selopt-low = ls_po_number-low.
              ls_selopt-high = ls_po_number-high.
              ls_selopt-shlpfield = 'PO_NUMBER'.
              ls_selopt-shlpname = l_shlpname.
              append ls_selopt to lt_selopt.
              clear ls_selopt.
            endloop.
          when 'VENDOR_NAME'.              " Equivalent to 'VendorName' property in the service
            lo_filter->convert_select_option(
              exporting
                is_select_option = ls_filter
              importing
                et_select_option = lr_vendor_name ).

            loop at lr_vendor_name into ls_vendor_name.
              ls_selopt-sign = ls_vendor_name-sign.
              ls_selopt-option = ls_vendor_name-option.
              ls_selopt-low = ls_vendor_name-low.
              ls_selopt-high = ls_vendor_name-high.
              ls_selopt-shlpfield = 'VENDOR_NAME'.
              ls_selopt-shlpname = l_shlpname.
              append ls_selopt to lt_selopt.
              clear ls_selopt.
            endloop.

          when others.
            " Log message in the application log
            me->/iwbep/if_sb_dpc_comm_services~log_message(
              exporting
                iv_msg_type   = 'E'
                iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                iv_msg_number = 020
                iv_msg_v1     = ls_filter-property ).
            " Raise Exception
            raise exception type /iwbep/cx_mgw_tech_exception
              exporting
                textid = /iwbep/cx_mgw_tech_exception=>internal_error.
        endcase.
      endloop.

*-------------------------------------------------------------
*  Call to Search Help get values mechanism
*-------------------------------------------------------------
* Get search help values
      me->/iwbep/if_sb_gendpc_shlp_data~get_search_help_values(
        exporting
          iv_shlp_name = l_shlpname
          iv_maxrows = lv_max_hits
          iv_sort = 'X'
          iv_call_shlt_exit = 'X'
          it_selopt = lt_selopt
        importing
          et_return_list = lt_result_list
          es_message = ls_message ).

*-------------------------------------------------------------
*  Map the Search Help returned results to the caller interface - Only mapped attributes
*-------------------------------------------------------------
      if ls_message is not initial.
* Call RFC call exception handling
        me->/iwbep/if_sb_dpc_comm_services~rfc_save_log(
          exporting
            is_return      = ls_message
            iv_entity_type = iv_entity_name
            it_key_tab     = it_key_tab ).
      endif.

      clear et_entityset.

      loop at lt_result_list into ls_result_list
        where record_number > ls_paging-skip.

        " Move SH results to GW request responce table

        "WBS_element AND cost_Centre disabled so no duplicates in result

        lv_next = sy-tabix + 1. " next loop iteration
        case ls_result_list-field_name.
          when 'ABN'.
            ls_entityset-abn = ls_result_list-field_value.
          "when 'COSTCENTER'.
          "  ls_entityset-costcenter = ls_result_list-field_value.
          when 'CREAT_DATE'.
            ls_entityset-creat_date = ls_result_list-field_value.
          when 'OA_NUMBER'.
            ls_entityset-oa_number = ls_result_list-field_value.
          when 'PO_NUMBER'.
            ls_entityset-po_number = ls_result_list-field_value.
          when 'VENDOR'.
            ls_entityset-vendor = ls_result_list-field_value.
          when 'VENDOR_NAME'.
            ls_entityset-vendor_name = ls_result_list-field_value.
          when 'VENDOR_NAME_M_C'.
            ls_entityset-vendor_name_m_c = ls_result_list-field_value.
          "when 'WBS_ELEMENT'.
          "  ls_entityset-wbs_element = ls_result_list-field_value.
        endcase.

        " Check if the next line in the result list is a new record
        read table lt_result_list into ls_result_list_next index lv_next.
        if sy-subrc <> 0
        or ls_result_list-record_number <> ls_result_list_next-record_number.
          " Save the collected SH result in the GW request table
          append ls_entityset to et_entityset.
          clear: ls_result_list_next, ls_entityset.
        endif.

      endloop.

      sort et_entityset by po_number.
      delete adjacent duplicates from et_entityset.

    endif.


  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZLFC_GR_DPC_EXT->GOODSRECIPTLOOKU_GET_ENTITYSET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_FILTER_SELECT_OPTIONS       TYPE        /IWBEP/T_MGW_SELECT_OPTION
* | [--->] IS_PAGING                      TYPE        /IWBEP/S_MGW_PAGING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [--->] IT_ORDER                       TYPE        /IWBEP/T_MGW_SORTING_ORDER
* | [--->] IV_FILTER_STRING               TYPE        STRING
* | [--->] IV_SEARCH_STRING               TYPE        STRING
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITYSET(optional)
* | [<---] ET_ENTITYSET                   TYPE        ZCL_ZLFC_GR_MPC=>TT_GOODSRECIPTLOOKUP
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method GOODSRECIPTLOOKU_GET_ENTITYSET.

*-------------------------------------------------------------
*  Map the runtime request to the select-options for the view - Only mapped attributes
*-------------------------------------------------------------
* Get all input information from the technical request context object
* Since DPC works with internal property names and runtime API interface holds external property names
* the process needs to get the all needed input information from the technical request context object
* Get filter or select option information
  data(lo_filter) = io_tech_request_context->get_filter( ).
  data(lt_filter_select_options) = lo_filter->get_filter_select_options( ).
  data(lv_filter_str) = lo_filter->get_filter_string( ).

* Check if the supplied filter is supported by standard gateway runtime process
  if  lv_filter_str            is not initial
  and lt_filter_select_options is initial.
    " If the string of the Filter System Query Option is not automatically converted into
    " filter option table (lt_filter_select_options), then the filtering combination is not supported
    " Log message in the application log
    me->/iwbep/if_sb_dpc_comm_services~log_message(
      exporting
        iv_msg_type   = 'E'
        iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
        iv_msg_number = 025 ).
    " Raise Exception
    raise exception type /iwbep/cx_mgw_tech_exception
      exporting
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.
  endif.

*--- only lookup results if at least one filter specified
  if lt_filter_select_options is initial.
    return.
  endif.

  " Page initialisation sometimes calls the get entityset without limits.  Ignore this call
  check is_paging-top  is not initial.

  " If the number of results is greater than the number asked for,
  " then the front end knows to ask for more results when the
  " user scrolls down the result list.
  " So for the DB select, l_max_rows is 1 more than was asked for.
  data(l_max_rows) = is_paging-top + is_paging-skip + 1.
  data l_val type c length  20.

* Maps filter table lines to the Search Help select options
  " it_filter_select_option has the gateway property name, lt_filter_select_options has the ABAP fieldname
  loop at lt_filter_select_options into data(ls_filter_so).

    case ls_filter_so-property.
      when 'DEB_CRE_IND'.              " Equivalent to 'DebCreInd' property in the service
        data(lt_deb_cre_ind) = ls_filter_so-select_options.
*            ls_selopt-shlpfield = 'DEB_CRE_IND'.
      when 'VENDOR_NAME_M_C'.              " Equivalent to 'VendorNameMC' property in the service
        data(lt_vendor_name_m_c) = ls_filter_so-select_options.
        loop at lt_vendor_name_m_c assigning field-symbol(<select_options>).
*--- convert vendor name input to upper for match code search
          translate <select_options>-low to upper case.
          translate <select_options>-high to upper case.
        endloop.
      when 'ENTRY_QNT'.              " Equivalent to 'EntryQnt' property in the service
        data(lt_entry_qnt) = ls_filter_so-select_options.
      when 'VENDOR_NAME'.              " Equivalent to 'VendorName' property in the service
        data(lt_vendor_name) = ls_filter_so-select_options.
      when 'MAT_DOC'.              " Equivalent to 'MatDoc' property in the service
        data(lt_mat_doc) = ls_filter_so-select_options.
        " MBLNR is 10 digits, and Defence config uses all 10, so check is simple
        loop at lt_mat_doc assigning <select_options> where option = 'CP'.
          l_val = <select_options>-low.
          if l_val+1(10) co '1234567890' or l_val na '*'.   " If user enters 10 digits, the Fiori app still sends CP, but no wildcards..
            <select_options>-low = l_val.
            <select_options>-option = 'EQ'.
          endif.
        endloop.
      when 'DOC_DATE'.              " Equivalent to 'DocDate' property in the service
        data(lt_doc_date) = ls_filter_so-select_options.
**--- add 1 to doc date provided (because front end provides date minus 1)
        loop at lt_doc_date assigning <select_options>.
          add 1 to <select_options>-low.
          add 1 to <select_options>-high.
        endloop.
      when 'USERNAME'.              " Equivalent to 'Username' property in the service
        data(lt_username) = ls_filter_so-select_options.
*--- convert user name to upper case
        " Also check if complete username is supplied, as an exact selection is much quicker than pattern
        loop at lt_username assigning <select_options>.
          translate <select_options>-low to upper case.
          translate <select_options>-high to upper case.
          if <select_options>-option = 'CP'.
            l_val = <select_options>-low.
            replace all occurrences of '*' in l_val with ''.
            select  count(*) from  usr02
                   where  bname  = l_val.
            if sy-subrc is initial.
              <select_options>-low = l_val.
              <select_options>-option = 'EQ'.
            endif.
          endif.
        endloop.
      when 'REF_DOC_NO'.              " Equivalent to 'RefDocNo' property in the service
        data(lt_ref_doc_no) = ls_filter_so-select_options.
      when 'HEADER_TXT'.              " Equivalent to 'HeaderTxt' property in the service
        data(lt_header_txt) = ls_filter_so-select_options.
      when 'VENDOR'.              " Equivalent to 'Vendor' property in the service
        data(lt_vendor) = ls_filter_so-select_options.
        data l_lifnr type lfa1-lifnr.
        loop at lt_vendor assigning <select_options>.
          translate <select_options>-low to upper case.
          translate <select_options>-high to upper case.
          if <select_options>-option = 'CP'.
            l_val = <select_options>-low.
            replace all occurrences of '*' in l_val with ''.
            l_lifnr = |{ l_val alpha = in }|.
            select  count(*) from  lfa1
                   where  lifnr  = l_lifnr.
            if sy-subrc is initial.
              <select_options>-low = l_lifnr.
              <select_options>-option = 'EQ'.
            endif.
          endif.
        endloop.
      when 'PO_NUMBER'.              " Equivalent to 'PoNumber' property in the service
        data(lt_po_number) = ls_filter_so-select_options.
        " Also check if complete PO number is supplied, as an exact selection is much quicker than pattern
        " EBELN is 10 digits, and Defence config uses all 10, so check is simple
        " (except external PO docs.  Just leave these as a pattern)
        loop at lt_po_number assigning <select_options> where option = 'CP'.
          l_val = <select_options>-low.
          if l_val+1(10) co '1234567890' or l_val na '*'.
            replace all occurrences of '*' in l_val with ''.
            <select_options>-low = l_val.
            <select_options>-option = 'EQ'.
          endif.
        endloop.
      when 'PO_ITEM'.              " Equivalent to 'PoItem' property in the service

      when others.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          exporting
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter_so-property ).
        " Raise Exception
        raise exception type /iwbep/cx_mgw_tech_exception
          exporting
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    endcase.
  endloop.


  select  distinct  deb_cre_ind   entry_qnt   vendor_name
                    mat_doc       doc_date    username
                    ref_doc_no    header_txt  vendor
                    po_number     po_item     vendor_name_m_c
         from  ZI_GR_GRLOOKUP
         into corresponding fields of table et_entityset
         up to l_max_rows rows
         where  mat_doc          in lt_mat_doc
         and    doc_date         in lt_doc_date
         and    username         in lt_username
         and    ref_doc_no       in lt_ref_doc_no
         and    header_txt       in lt_header_txt
         and    vendor           in lt_vendor
         and    deb_cre_ind      in lt_deb_cre_ind
         and    entry_qnt        in lt_entry_qnt
         and    po_number        in lt_po_number
         and    vendor_name      in lt_vendor_name
         and    vendor_name_m_c  in lt_vendor_name_m_c
         order by mat_doc.

  " Just return the additional rows.
  " Update the counts to the front end knows if there are more records available.
  es_response_context-inlinecount = lines( et_entityset ).
  /iwbep/cl_mgw_data_util=>paging( exporting is_paging = is_paging
                                   changing  ct_data = et_entityset ).
  es_response_context-count = lines( et_entityset ).

  " Formatting
  loop at et_entityset assigning field-symbol(<entityset>) where deb_cre_ind <> 'S'.
    <entityset>-entry_qnt = - <entityset>-entry_qnt.
  endloop.

  endmethod.
ENDCLASS.
